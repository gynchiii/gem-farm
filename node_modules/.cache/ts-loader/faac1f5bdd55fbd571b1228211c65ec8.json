{"remainingRequest":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/home/gynchiii/gem-farm/app/gem-farm/src/common/web3/NFTget.ts","dependencies":[{"path":"/home/gynchiii/gem-farm/app/gem-farm/src/common/web3/NFTget.ts","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/babel.config.js","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1643597848340},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1643597859789}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2d5bmNoaWlpL2dlbS1mYXJtL2FwcC9nZW0tZmFybS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJzsKaW1wb3J0IHsgVE9LRU5fUFJPR1JBTV9JRCB9IGZyb20gJ0Bzb2xhbmEvc3BsLXRva2VuJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgcHJvZ3JhbXMgfSBmcm9tICdAbWV0YXBsZXgvanMnOwp2YXIgTWV0YWRhdGEgPSBwcm9ncmFtcy5tZXRhZGF0YS5NZXRhZGF0YTsKCmZ1bmN0aW9uIGdldFRva2Vuc0J5T3duZXIoX3gsIF94MikgewogIHJldHVybiBfZ2V0VG9rZW5zQnlPd25lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZ2V0VG9rZW5zQnlPd25lcigpIHsKICBfZ2V0VG9rZW5zQnlPd25lciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShvd25lciwgY29ubikgewogICAgdmFyIHRva2VuczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBjb25uLmdldFBhcnNlZFRva2VuQWNjb3VudHNCeU93bmVyKG93bmVyLCB7CiAgICAgICAgICAgICAgcHJvZ3JhbUlkOiBUT0tFTl9QUk9HUkFNX0lECiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgdG9rZW5zID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgdG9rZW5zLnZhbHVlLmZpbHRlcihmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgIHZhciBhbW91bnQgPSB0LmFjY291bnQuZGF0YS5wYXJzZWQuaW5mby50b2tlbkFtb3VudDsKICAgICAgICAgICAgICByZXR1cm4gYW1vdW50LmRlY2ltYWxzID09PSAwICYmIGFtb3VudC51aUFtb3VudCA9PT0gMTsKICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHB1YmtleTogdC5wdWJrZXksCiAgICAgICAgICAgICAgICBtaW50OiB0LmFjY291bnQuZGF0YS5wYXJzZWQuaW5mby5taW50CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CiAgcmV0dXJuIF9nZXRUb2tlbnNCeU93bmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGdldE5GVE1ldGFkYXRhKF94MywgX3g0LCBfeDUpIHsKICByZXR1cm4gX2dldE5GVE1ldGFkYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9nZXRORlRNZXRhZGF0YSgpIHsKICBfZ2V0TkZUTWV0YWRhdGEgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKG1pbnQsIGNvbm4sIHB1YmtleSkgewogICAgdmFyIG1ldGFkYXRhUERBLCBvbmNoYWluTWV0YWRhdGEsIGV4dGVybmFsTWV0YWRhdGE7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIE1ldGFkYXRhLmdldFBEQShtaW50KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIG1ldGFkYXRhUERBID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIE1ldGFkYXRhLmxvYWQoY29ubiwgbWV0YWRhdGFQREEpOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgb25jaGFpbk1ldGFkYXRhID0gX2NvbnRleHQyLnNlbnQuZGF0YTsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KG9uY2hhaW5NZXRhZGF0YS5kYXRhLnVyaSk7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBleHRlcm5hbE1ldGFkYXRhID0gX2NvbnRleHQyLnNlbnQuZGF0YTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICBwdWJrZXk6IHB1YmtleSA/IG5ldyBQdWJsaWNLZXkocHVia2V5KSA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICBtaW50OiBuZXcgUHVibGljS2V5KG1pbnQpLAogICAgICAgICAgICAgIG9uY2hhaW5NZXRhZGF0YTogb25jaGFpbk1ldGFkYXRhLAogICAgICAgICAgICAgIGV4dGVybmFsTWV0YWRhdGE6IGV4dGVybmFsTWV0YWRhdGEKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxMzsKICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDApOwogICAgICAgICAgICBjb25zb2xlLmxvZygiZmFpbGVkIHRvIHB1bGwgbWV0YWRhdGEgZm9yIHRva2VuICIuY29uY2F0KG1pbnQpKTsKCiAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1swLCAxM11dKTsKICB9KSk7CiAgcmV0dXJuIF9nZXRORlRNZXRhZGF0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZ2V0TkZUTWV0YWRhdGFGb3JNYW55KF94NiwgX3g3KSB7CiAgcmV0dXJuIF9nZXRORlRNZXRhZGF0YUZvck1hbnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldE5GVE1ldGFkYXRhRm9yTWFueSgpIHsKICBfZ2V0TkZUTWV0YWRhdGFGb3JNYW55ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyh0b2tlbnMsIGNvbm4pIHsKICAgIHZhciBwcm9taXNlcywgbmZ0czsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHByb21pc2VzID0gW107CiAgICAgICAgICAgIHRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzLnB1c2goZ2V0TkZUTWV0YWRhdGEodC5taW50LCBjb25uLCB0LnB1YmtleSkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgbmZ0cyA9IF9jb250ZXh0My5zZW50LmZpbHRlcihmdW5jdGlvbiAobikgewogICAgICAgICAgICAgIHJldHVybiAhIW47CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zb2xlLmxvZygiZm91bmQgIi5jb25jYXQobmZ0cy5sZW5ndGgsICIgbWV0YWRhdGFzIikpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgbmZ0cyk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMyk7CiAgfSkpOwogIHJldHVybiBfZ2V0TkZUTWV0YWRhdGFGb3JNYW55LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBnZXRORlRzQnlPd25lcihfeDgsIF94OSkgewogIHJldHVybiBfZ2V0TkZUc0J5T3duZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldE5GVHNCeU93bmVyKCkgewogIF9nZXRORlRzQnlPd25lciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQob3duZXIsIGNvbm4pIHsKICAgIHZhciB0b2tlbnM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBnZXRUb2tlbnNCeU93bmVyKG93bmVyLCBjb25uKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHRva2VucyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICBjb25zb2xlLmxvZygiZm91bmQgIi5jb25jYXQodG9rZW5zLmxlbmd0aCwgIiB0b2tlbnMiKSk7CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIGdldE5GVE1ldGFkYXRhRm9yTWFueSh0b2tlbnMsIGNvbm4pOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0NC5zZW50KTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU0KTsKICB9KSk7CiAgcmV0dXJuIF9nZXRORlRzQnlPd25lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},{"version":3,"sources":["/home/gynchiii/gem-farm/app/gem-farm/src/common/web3/NFTget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport axios from 'axios';\nimport { programs } from '@metaplex/js';\n\nconst {\n  metadata: { Metadata },\n} = programs;\n\nexport interface INFT {\n  pubkey?: PublicKey;\n  mint: PublicKey;\n  onchainMetadata: unknown;\n  externalMetadata: unknown;\n}\n\nasync function getTokensByOwner(owner: PublicKey, conn: Connection) {\n  const tokens = await conn.getParsedTokenAccountsByOwner(owner, {\n    programId: TOKEN_PROGRAM_ID,\n  });\n\n  // initial filter - only tokens with 0 decimals & of which 1 is present in the wallet\n  return tokens.value\n    .filter((t) => {\n      const amount = t.account.data.parsed.info.tokenAmount;\n      return amount.decimals === 0 && amount.uiAmount === 1;\n    })\n    .map((t) => {\n      return { pubkey: t.pubkey, mint: t.account.data.parsed.info.mint };\n    });\n}\n\nasync function getNFTMetadata(\n  mint: string,\n  conn: Connection,\n  pubkey?: string\n): Promise<INFT | undefined> {\n  // console.log('Pulling metadata for:', mint);\n  try {\n    const metadataPDA = await Metadata.getPDA(mint);\n    const onchainMetadata = (await Metadata.load(conn, metadataPDA)).data;\n    const externalMetadata = (await axios.get(onchainMetadata.data.uri)).data;\n    return {\n      pubkey: pubkey ? new PublicKey(pubkey) : undefined,\n      mint: new PublicKey(mint),\n      onchainMetadata,\n      externalMetadata,\n    };\n  } catch (e) {\n    console.log(`failed to pull metadata for token ${mint}`);\n  }\n}\n\nexport async function getNFTMetadataForMany(\n  tokens: any[],\n  conn: Connection\n): Promise<INFT[]> {\n  const promises: Promise<INFT | undefined>[] = [];\n  tokens.forEach((t) => promises.push(getNFTMetadata(t.mint, conn, t.pubkey)));\n  const nfts = (await Promise.all(promises)).filter((n) => !!n);\n  console.log(`found ${nfts.length} metadatas`);\n\n  return nfts as INFT[];\n}\n\nexport async function getNFTsByOwner(\n  owner: PublicKey,\n  conn: Connection\n): Promise<INFT[]> {\n  const tokens = await getTokensByOwner(owner, conn);\n  console.log(`found ${tokens.length} tokens`);\n\n  return await getNFTMetadataForMany(tokens, conn);\n}\n"],"sourceRoot":""}]}