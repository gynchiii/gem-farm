{"remainingRequest":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/components/gem-farm/InitFarm.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/gynchiii/gem-farm/app/gem-farm/src/components/gem-farm/InitFarm.vue","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/babel.config.js","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1643597848340},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1643597859789},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1643597863917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2d5bmNoaWlpL2dlbS1mYXJtL2FwcC9nZW0tZmFybS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBvbk1vdW50ZWQsIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnOwppbXBvcnQgdXNlV2FsbGV0IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3dhbGxldCc7CmltcG9ydCB1c2VDbHVzdGVyIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL2NsdXN0ZXInOwppbXBvcnQgeyBpbml0R2VtRmFybSB9IGZyb20gJ0AvY29tbW9uL2dlbS1mYXJtJzsKaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJzsKaW1wb3J0IHsgQk4gfSBmcm9tICdAcHJvamVjdC1zZXJ1bS9hbmNob3InOwppbXBvcnQgeyBSZXdhcmRUeXBlIH0gZnJvbSAnQGdlbXdvcmtzL2dlbS1mYXJtLXRzJzsKZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHsKICBlbWl0czogWyduZXctZmFybSddLAogIHNldHVwOiBmdW5jdGlvbiBzZXR1cChwcm9wcywgY3R4KSB7CiAgICB2YXIgX3VzZVdhbGxldCA9IHVzZVdhbGxldCgpLAogICAgICAgIHdhbGxldCA9IF91c2VXYWxsZXQud2FsbGV0LAogICAgICAgIGdldFdhbGxldCA9IF91c2VXYWxsZXQuZ2V0V2FsbGV0OwoKICAgIHZhciBfdXNlQ2x1c3RlciA9IHVzZUNsdXN0ZXIoKSwKICAgICAgICBjbHVzdGVyID0gX3VzZUNsdXN0ZXIuY2x1c3RlciwKICAgICAgICBnZXRDb25uZWN0aW9uID0gX3VzZUNsdXN0ZXIuZ2V0Q29ubmVjdGlvbjsKCiAgICB2YXIgZ2Y7CiAgICB3YXRjaChbd2FsbGV0LCBjbHVzdGVyXSwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBpbml0R2VtRmFybShnZXRDb25uZWN0aW9uKCksIGdldFdhbGxldCgpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBnZiA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKTsgLy9uZWVkZWQgY296IG1vdW50cyBsYXRlcgoKICAgIG9uTW91bnRlZCggLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaWYgKCEoZ2V0V2FsbGV0KCkgJiYgZ2V0Q29ubmVjdGlvbigpKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGluaXRHZW1GYXJtKGdldENvbm5lY3Rpb24oKSwgZ2V0V2FsbGV0KCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGdmID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkpOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW5pdCBmYXJtCgogICAgdmFyIG1pbnRBID0gcmVmKCk7CiAgICB2YXIgdHlwZUEgPSByZWYoUmV3YXJkVHlwZS5WYXJpYWJsZSk7CiAgICB2YXIgbWludEIgPSByZWYoKTsKICAgIHZhciB0eXBlQiA9IHJlZihSZXdhcmRUeXBlLkZpeGVkKTsKICAgIHZhciBtaW5TdGFraW5nUGVyaW9kU2VjID0gcmVmKCk7CiAgICB2YXIgY29vbGRvd25QZXJpb2RTZWMgPSByZWYoKTsKICAgIHZhciB1bnN0YWtpbmdGZWVMYW1wID0gcmVmKCk7CgogICAgdmFyIGluaXRGYXJtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgX3lpZWxkJGdmJGluaXRGYXJtV2FsLCBmYXJtOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIGdmLmluaXRGYXJtV2FsbGV0KG5ldyBQdWJsaWNLZXkobWludEEudmFsdWUpLCB0eXBlQS52YWx1ZSwgbmV3IFB1YmxpY0tleShtaW50Qi52YWx1ZSksIHR5cGVCLnZhbHVlLCB7CiAgICAgICAgICAgICAgICAgIG1pblN0YWtpbmdQZXJpb2RTZWM6IG5ldyBCTihtaW5TdGFraW5nUGVyaW9kU2VjLnZhbHVlKSwKICAgICAgICAgICAgICAgICAgY29vbGRvd25QZXJpb2RTZWM6IG5ldyBCTihjb29sZG93blBlcmlvZFNlYy52YWx1ZSksCiAgICAgICAgICAgICAgICAgIHVuc3Rha2luZ0ZlZUxhbXA6IG5ldyBCTih1bnN0YWtpbmdGZWVMYW1wLnZhbHVlKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF95aWVsZCRnZiRpbml0RmFybVdhbCA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgZmFybSA9IF95aWVsZCRnZiRpbml0RmFybVdhbC5mYXJtOwogICAgICAgICAgICAgICAgY3R4LmVtaXQoJ25ldy1mYXJtJywgZmFybS5wdWJsaWNLZXkudG9CYXNlNTgoKSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBpbml0RmFybSgpIHsKICAgICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKTsKCiAgICByZXR1cm4gewogICAgICB3YWxsZXQ6IHdhbGxldCwKICAgICAgUmV3YXJkVHlwZTogUmV3YXJkVHlwZSwKICAgICAgbWludEE6IG1pbnRBLAogICAgICB0eXBlQTogdHlwZUEsCiAgICAgIG1pbnRCOiBtaW50QiwKICAgICAgdHlwZUI6IHR5cGVCLAogICAgICBtaW5TdGFraW5nUGVyaW9kU2VjOiBtaW5TdGFraW5nUGVyaW9kU2VjLAogICAgICBjb29sZG93blBlcmlvZFNlYzogY29vbGRvd25QZXJpb2RTZWMsCiAgICAgIHVuc3Rha2luZ0ZlZUxhbXA6IHVuc3Rha2luZ0ZlZUxhbXAsCiAgICAgIGluaXRGYXJtOiBpbml0RmFybQogICAgfTsKICB9Cn0pOw=="},{"version":3,"sources":["/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/components/gem-farm/InitFarm.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport useWallet from '../../composables/wallet';\nimport useCluster from '../../composables/cluster';\nimport { initGemFarm } from '@/common/gem-farm';\nimport { PublicKey } from '@solana/web3.js';\nimport { BN } from '@project-serum/anchor';\nimport { RewardType } from '@gemworks/gem-farm-ts';\n\nexport default defineComponent({\n  emits: ['new-farm'],\n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      gf = await initGemFarm(getConnection(), getWallet()!);\n    });\n\n    //needed coz mounts later\n    onMounted(async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n      }\n    });\n\n    // --------------------------------------- init farm\n    const mintA = ref<string>();\n    const typeA = ref<any>(RewardType.Variable);\n    const mintB = ref<string>();\n    const typeB = ref<any>(RewardType.Fixed);\n\n    const minStakingPeriodSec = ref<string>();\n    const cooldownPeriodSec = ref<string>();\n    const unstakingFeeLamp = ref<string>();\n\n    const initFarm = async () => {\n      const { farm } = await gf.initFarmWallet(\n        new PublicKey(mintA.value!),\n        typeA.value,\n        new PublicKey(mintB.value!),\n        typeB.value,\n        {\n          minStakingPeriodSec: new BN(minStakingPeriodSec.value!),\n          cooldownPeriodSec: new BN(cooldownPeriodSec.value!),\n          unstakingFeeLamp: new BN(unstakingFeeLamp.value!),\n        }\n      );\n\n      ctx.emit('new-farm', farm.publicKey.toBase58());\n    };\n\n    return {\n      wallet,\n      RewardType,\n      mintA,\n      typeA,\n      mintB,\n      typeB,\n      minStakingPeriodSec,\n      cooldownPeriodSec,\n      unstakingFeeLamp,\n      initFarm,\n    };\n  },\n});\n"],"sourceRoot":""}]}