{"remainingRequest":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/views/Farmer.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/gynchiii/gem-farm/app/gem-farm/src/views/Farmer.vue","mtime":1644032003819},{"path":"/home/gynchiii/gem-farm/app/gem-farm/babel.config.js","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1643597848340},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1643597859789},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1643597863917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/views/Farmer.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, nextTick, onMounted, ref, watch } from 'vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport { initGemFarm } from '@/common/gem-farm';\nimport { PublicKey } from '@solana/web3.js';\nimport ConfigPane from '@/components/ConfigPane.vue';\nimport FarmerDisplay from '@/components/gem-farm/FarmerDisplay.vue';\nimport Vault from '@/components/gem-bank/Vault.vue';\nimport { INFT } from '@/common/web3/NFTget';\nimport { stringifyPKsAndBNs } from '@gemworks/gem-farm-ts';\nimport { publicKey } from '@project-serum/anchor/dist/cjs/utils';\n\nexport default defineComponent({\n  components: { Vault, FarmerDisplay, ConfigPane },\n  setup() {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      await freshStart();\n    });\n\n    //needed in case we switch in from another window\n    onMounted(async () => {\n      await freshStart();\n    });\n\n    // --------------------------------------- farmer details\n    const farm = ref<string>();\n    const farmAcc = ref<any>();\n\n    const farmerIdentity = ref<string>();\n    const farmerAcc = ref<any>();\n    const farmerState = ref<string>();\n\n    const availableA = ref<string>();\n    const availableB = ref<string>();\n\n    //auto loading for when farm changes\n    watch(farmAcc, async () => {\n      await freshStart();\n    });\n\n    const updateAvailableRewards = async () => {\n      availableA.value = farmerAcc.value.rewardA.accruedReward\n        .sub(farmerAcc.value.rewardA.paidOutReward)\n        .toString();\n      availableB.value = farmerAcc.value.rewardB.accruedReward\n        .sub(farmerAcc.value.rewardB.paidOutReward)\n        .toString();\n    };\n\n    const fetchFarn = async () => {\n      farmAcc.value = await gf.fetchFarmAcc(new PublicKey(farm.value!));\n      console.log(\n        `farm found at ${farm.value}:`,\n        stringifyPKsAndBNs(farmAcc.value)\n      );\n    };\n\n    const fetchFarmer = async () => {\n      const [farmerPDA] = await gf.findFarmerPDA(\n        new PublicKey(farm.value!),\n        getWallet()!.publicKey\n      );\n      farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n      farmerAcc.value = await gf.fetchFarmerAcc(farmerPDA);\n      farmerState.value = gf.parseFarmerState(farmerAcc.value);\n      await updateAvailableRewards();\n      console.log(\n        `farmer found at ${farmerIdentity.value}:`,\n        stringifyPKsAndBNs(farmerAcc.value)\n      );\n    };\n\n    const freshStart = async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n\n        //reset stuff\n        farmAcc.value = undefined;\n        farmerAcc.value = undefined;\n        farmerState.value = undefined;\n        availableA.value = undefined;\n        availableB.value = undefined;\n\n        try {\n          await fetchFarn();\n          await fetchFarmer();\n        } catch (e) {\n          console.log(`farm with PK ${farm.value} not found :(`);\n        }\n      }\n    };\n\n    const initFarmer = async () => {\n      await gf.initFarmerWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n    };\n\n    // --------------------------------------- staking\n    const beginStaking = async () => {\n      await gf.stakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n\n    const endStaking = async () => {\n      await gf.unstakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n\n    const claim = async () => {\n      await gf.claimWallet(\n        new PublicKey(farm.value!),\n        new PublicKey(farmAcc.value.rewardA.rewardMint!),\n        new PublicKey(farmAcc.value.rewardB.rewardMint!)\n      );\n      await fetchFarmer();\n    };\n\n    const handleRefreshFarmer = async () => {\n      await fetchFarmer();\n    };\n\n    // --------------------------------------- adding extra gem\n    const selectedNFTs = ref<INFT[]>([]);\n\n    const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\n      console.log(`selected ${newSelectedNFTs.length} NFTs`);\n      selectedNFTs.value = newSelectedNFTs;\n    };\n\n    const addSingleGem = async (\n      gemMint: PublicKey,\n      gemSource: PublicKey,\n      creator: PublicKey\n    ) => {\n      await gf.flashDepositWallet(\n        new PublicKey(farm.value!),\n        '1',\n        gemMint,\n        gemSource,\n        creator\n      );\n      await fetchFarmer();\n    };\n\n    const addGems = async () => {\n      await Promise.all(\n        selectedNFTs.value.map((nft) => {\n          const creator = new PublicKey(\n            //todo currently simply taking the 1st creator\n            (nft.onchainMetadata as any).data.creators[0].address\n          );\n          console.log('creator is', creator.toBase58());\n\n          addSingleGem(nft.mint, nft.pubkey!, creator);\n        })\n      );\n      console.log(\n        `added another ${selectedNFTs.value.length} gems into staking vault`\n      );\n    };\n\n    return {\n      wallet,\n      farm,\n      farmAcc,\n      farmer: farmerIdentity,\n      farmerAcc,\n      farmerState,\n      availableA,\n      availableB,\n      initFarmer,\n      beginStaking,\n      endStaking,\n      claim,\n      handleRefreshFarmer,\n      selectedNFTs,\n      handleNewSelectedNFT,\n      addGems,\n    };\n  },\n});\n"],"sourceRoot":""}]}