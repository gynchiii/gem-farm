{"remainingRequest":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/views/Manager.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/gynchiii/gem-farm/app/gem-farm/src/views/Manager.vue","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/babel.config.js","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1643597848340},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1643597859789},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1643597863917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/views/Manager.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport ConfigPane from '@/components/ConfigPane.vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport TestMint from '@/components/gem-farm/TestMint.vue';\nimport { initGemFarm } from '@/common/gem-farm';\nimport InitFarm from '@/components/gem-farm/InitFarm.vue';\nimport { PublicKey } from '@solana/web3.js';\nimport { stringifyPKsAndBNs } from '@gemworks/gem-farm-ts';\nimport AuthorizeFunder from '@/components/gem-farm/AuthorizeFunder.vue';\nimport FundCancelLock from '@/components/gem-farm/FundCancelLock.vue';\nimport RefreshFarmer from '@/components/gem-farm/RefreshFarmer.vue';\nimport TreasuryPayout from '@/components/gem-farm/TreasuryPayout.vue';\nimport TheWhitelist from '@/components/gem-farm/BankWhitelist.vue';\nimport UpdateFarm from '@/components/gem-farm/UpdateFarm.vue';\nimport FarmDisplay from '@/components/gem-farm/FarmDisplay.vue';\n\nexport default defineComponent({\n  components: {\n    FarmDisplay,\n    UpdateFarm,\n    TheWhitelist,\n    TreasuryPayout,\n    RefreshFarmer,\n    FundCancelLock,\n    AuthorizeFunder,\n    InitFarm,\n    TestMint,\n    ConfigPane,\n  },\n  setup() {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      gf = await initGemFarm(getConnection(), getWallet()!);\n      await findFarmsByManager(getWallet()!.publicKey!);\n    });\n\n    //needed in case we switch in from another window\n    onMounted(async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        await findFarmsByManager(getWallet()!.publicKey!);\n      }\n    });\n\n    // --------------------------------------- farm locator\n    const foundFarms = ref<any[]>([]);\n    const farm = ref<string>();\n    const farmAcc = ref<any>();\n    const currentFarmIndex = ref<number>(0);\n    const isLoading = ref<boolean>(true);\n\n    //whenever we change the farm, we update the index/account\n    watch(farm, (newFarm: any) => {\n      updateFarmByPk(newFarm);\n    });\n\n    const updateFarmByPk = (newFarm: string) => {\n      const idx = foundFarms.value.findIndex(\n        (ff) => ff.publicKey.toBase58() === newFarm\n      );\n      currentFarmIndex.value = idx;\n      farmAcc.value = foundFarms.value[idx].account;\n    };\n\n    const findFarmsByManager = async (manager: PublicKey) => {\n      foundFarms.value = await gf.fetchAllFarmPDAs(manager);\n      console.log('Found farms:', stringifyPKsAndBNs(foundFarms.value));\n\n      if (foundFarms.value.length) {\n        farm.value =\n          foundFarms.value[currentFarmIndex.value].publicKey.toBase58();\n        //yes this is needed here, as sometimes farm.value stays same, but we want to rerender anyway\n        updateFarmByPk(farm.value!);\n      }\n      isLoading.value = false;\n    };\n\n    // --------------------------------------- rest\n    const showNewFarm = ref<boolean>(false);\n\n    const handleNewFarm = async (newFarm: string) => {\n      showNewFarm.value = false;\n      await findFarmsByManager(getWallet()!.publicKey!);\n      farm.value = newFarm;\n    };\n\n    const handleUpdateFarm = async () => {\n      await findFarmsByManager(getWallet()!.publicKey!);\n    };\n\n    const refreshFarms = async () => {\n      await findFarmsByManager(getWallet()!.publicKey!);\n    };\n\n    return {\n      isLoading,\n      wallet,\n      foundFarms,\n      farm,\n      farmAcc,\n      handleNewFarm,\n      handleUpdateFarm,\n      showNewFarm,\n      refreshFarms,\n    };\n  },\n});\n"],"sourceRoot":""}]}