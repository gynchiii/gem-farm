{"remainingRequest":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/home/gynchiii/gem-farm/app/gem-farm/src/common/gem-bank/index.ts","dependencies":[{"path":"/home/gynchiii/gem-farm/app/gem-farm/src/common/gem-bank/index.ts","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/babel.config.js","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1643597848340},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1643597859789}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/gynchiii/gem-farm/app/gem-farm/src/common/gem-bank/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAS,aAAT,QAA6C,uBAA7C;AACA,SAAqB,OAArB,QAA+C,iBAA/C;AAEA,SAAS,QAAT,QAAyB,WAAzB;AACA,SAAS,UAAT,EAAqB,QAArB,QAAqC,cAArC,C,CAEA;;AACA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,MAAM,QAAQ,GAAG,OAAO,CAAC,aAAR,CACf,UAAU,CAAC,IAAX,CAAgB,CACd,GADc,EACT,GADS,EACJ,GADI,EACC,GADD,EACM,EADN,EACU,EADV,EACc,GADd,EACmB,EADnB,EACuB,GADvB,EAC4B,EAD5B,EACgC,GADhC,EACqC,EADrC,EACyC,GADzC,EAC8C,GAD9C,EACmD,GADnD,EACwD,GADxD,EAEd,GAFc,EAET,CAFS,EAEN,EAFM,EAEF,EAFE,EAEE,EAFF,EAEM,GAFN,EAEW,EAFX,EAEe,GAFf,EAEoB,GAFpB,EAEyB,GAFzB,EAE8B,GAF9B,EAEmC,EAFnC,EAEuC,GAFvC,EAE4C,GAF5C,EAEiD,GAFjD,EAEsD,EAFtD,EAGd,GAHc,EAGT,GAHS,EAGJ,EAHI,EAGA,CAHA,EAGG,GAHH,EAGQ,GAHR,EAGa,GAHb,EAGkB,GAHlB,EAGuB,GAHvB,EAG4B,GAH5B,EAGiC,GAHjC,EAGsC,GAHtC,EAG2C,EAH3C,EAG+C,GAH/C,EAGoD,EAHpD,EAGwD,GAHxD,EAId,GAJc,EAIT,GAJS,EAIJ,GAJI,EAIC,GAJD,EAIM,EAJN,EAIU,EAJV,EAIc,EAJd,EAIkB,GAJlB,EAIuB,GAJvB,EAI4B,GAJ5B,EAIiC,GAJjC,EAIsC,EAJtC,EAI0C,GAJ1C,EAI+C,GAJ/C,EAIoD,EAJpD,EAIwD,EAJxD,CAAhB,CADe,CAAjB;AAQA,SAAO,IAAI,UAAJ,CAAe,QAAf,CAAP;AACD,C,CAED;;AACA,gBAAsB,WAAtB;AAAA;AAAA;;;yEAAO,kBACL,IADK,EAEL,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,YAAA,WAJD,GAIe,MAJf,aAIe,MAJf,cAIe,MAJf,GAIyB,gBAAgB,EAJzC;AAAA;AAAA,mBAKoB,KAAK,CAAC,eAAD,CALzB;;AAAA;AAAA;AAAA,kCAK4C,IAL5C;;AAAA;AAKC,YAAA,GALD;AAAA,8CAME,IAAI,OAAJ,CAAY,IAAZ,EAAkB,WAAlB,EAAgD,GAAhD,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,WAAa,OAAb;AAAA;;AAAA;;AACE,mBAAY,IAAZ,EAA8B,MAA9B,EAAqD,GAArD,EAA6D;AAAA;;AAC3D,QAAM,SAAS,GAAG,QAAQ,CAAC,gBAA3B;AAD2D,6BAErD,IAFqD,EAE/C,MAF+C,EAEvC,GAFuC,EAElC,SAFkC;AAG5D;;AAJH;AAAA;AAAA;AAAA,oFAME;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,gBAAA,IADR,GACe,OAAO,CAAC,QAAR,EADf;AAAA;AAAA,uBAEsB,KAAK,QAAL,CAClB,IADkB,EAElB,KAAK,MAAL,CAAY,SAFM,EAGlB,KAAK,MAAL,CAAY,SAHM,CAFtB;;AAAA;AAEQ,gBAAA,KAFR;AAAA,iDAOS;AAAE,kBAAA,IAAI,EAAJ,IAAF;AAAQ,kBAAA,KAAK,EAAL;AAAR,iBAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFAgBE,kBAAsB,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAK,SAAL,CACL,IADK,EAEL,KAAK,MAAL,CAAY,SAFP,EAGL,KAAK,MAAL,CAAY,SAHP,EAIL,KAAK,MAAL,CAAY,SAJP,EAKL,YALK,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhBF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wFA0BE,kBACE,IADF,EAEE,KAFF,EAGE,WAHF;AAAA;AAAA;AAAA;AAAA;AAAA,kDAKS,KAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,KAAK,MAAL,CAAY,SAA3C,EAAsD,WAAtD,CALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAkCE,kBACE,IADF,EAEE,KAFF,EAGE,SAHF,EAIE,OAJF,EAKE,SALF,EAME,OANF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAQkC,KAAK,qBAAL,CAA2B,IAA3B,EAAiC,OAAjC,CARlC;;AAAA;AAAA;AAAA;AAQS,gBAAA,SART;AAQoB,gBAAA,IARpB;AAAA;AAAA,uBASsC,KAAK,qBAAL,CAClC,IADkC,EAElC,OAFkC,CATtC;;AAAA;AAAA;AAAA;AASS,gBAAA,YATT;AASuB,gBAAA,KATvB;AAAA;AAAA,uBAayB,QAAQ,CAAC,QAAT,CAAkB,QAAlB,CAA2B,MAA3B,CAAkC,OAAlC,CAbzB;;AAAA;AAaQ,gBAAA,QAbR;AAAA,kDAeS,KAAK,UAAL,CACL,IADK,EAEL,KAFK,EAGL,KAAK,MAAL,CAAY,SAHP,EAIL,SAJK,EAKL,OALK,EAML,SANK,EAOL,SAPK,EAQL,QARK,EASL,YATK,CAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlCF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFA8DE,kBACE,IADF,EAEE,KAFF,EAGE,SAHF,EAIE,OAJF;AAAA;AAAA;AAAA;AAAA;AAAA,kDAMS,KAAK,WAAL,CACL,IADK,EAEL,KAFK,EAGL,KAAK,MAAL,CAAY,SAHP,EAIL,SAJK,EAKL,OALK,EAML,KAAK,MAAL,CAAY,SANP,CANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA9DF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0FA8EE,kBACE,IADF,EAEE,kBAFF,EAGE,aAHF;AAAA;AAAA;AAAA;AAAA;AAAA,kDAKS,KAAK,cAAL,CACL,IADK,EAEL,KAAK,MAAL,CAAY,SAFP,EAGL,kBAHK,EAIL,aAJK,CALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA9EF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FA2FE,kBAAgC,IAAhC,EAAiD,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAK,mBAAL,CACL,IADK,EAEL,KAAK,MAAL,CAAY,SAFP,EAGL,eAHK,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA3FF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAA6B,aAA7B","sourcesContent":["import * as anchor from '@project-serum/anchor';\nimport { BN, Idl } from '@project-serum/anchor';\nimport { GemBankClient, WhitelistType } from '@gemworks/gem-farm-ts';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { DEFAULTS } from '@/globals';\nimport { NodeWallet, programs } from '@metaplex/js';\n\n//when we only want to view vaults, no need to connect a real wallet.\nexport function createFakeWallet() {\n  const leakedKp = Keypair.fromSecretKey(\n    Uint8Array.from([\n      208, 175, 150, 242, 88, 34, 108, 88, 177, 16, 168, 75, 115, 181, 199, 242,\n      120, 4, 78, 75, 19, 227, 13, 215, 184, 108, 226, 53, 111, 149, 179, 84,\n      137, 121, 79, 1, 160, 223, 124, 241, 202, 203, 220, 237, 50, 242, 57, 158,\n      226, 207, 203, 188, 43, 28, 70, 110, 214, 234, 251, 15, 249, 157, 62, 80,\n    ])\n  );\n  return new NodeWallet(leakedKp);\n}\n\n//need a separate func coz fetching IDL is async and can't be done in constructor\nexport async function initGemBank(\n  conn: Connection,\n  wallet?: SignerWalletAdapter\n) {\n  const walletToUse = wallet ?? createFakeWallet();\n  const idl = await (await fetch('gem_bank.json')).json();\n  return new GemBank(conn, walletToUse as anchor.Wallet, idl);\n}\n\nexport class GemBank extends GemBankClient {\n  constructor(conn: Connection, wallet: anchor.Wallet, idl: Idl) {\n    const programId = DEFAULTS.GEM_BANK_PROG_ID;\n    super(conn, wallet, idl, programId);\n  }\n\n  async initBankWallet() {\n    const bank = Keypair.generate();\n    const txSig = await this.initBank(\n      bank,\n      this.wallet.publicKey,\n      this.wallet.publicKey\n    );\n    return { bank, txSig };\n  }\n\n  async initVaultWallet(bank: PublicKey) {\n    return this.initVault(\n      bank,\n      this.wallet.publicKey,\n      this.wallet.publicKey,\n      this.wallet.publicKey,\n      'test_vault'\n    );\n  }\n\n  async setVaultLockWallet(\n    bank: PublicKey,\n    vault: PublicKey,\n    vaultLocked: boolean\n  ) {\n    return this.setVaultLock(bank, vault, this.wallet.publicKey, vaultLocked);\n  }\n\n  async depositGemWallet(\n    bank: PublicKey,\n    vault: PublicKey,\n    gemAmount: BN,\n    gemMint: PublicKey,\n    gemSource: PublicKey,\n    creator: PublicKey\n  ) {\n    const [mintProof, bump] = await this.findWhitelistProofPDA(bank, gemMint);\n    const [creatorProof, bump2] = await this.findWhitelistProofPDA(\n      bank,\n      creator\n    );\n    const metadata = await programs.metadata.Metadata.getPDA(gemMint);\n\n    return this.depositGem(\n      bank,\n      vault,\n      this.wallet.publicKey,\n      gemAmount,\n      gemMint,\n      gemSource,\n      mintProof,\n      metadata,\n      creatorProof\n    );\n  }\n\n  async withdrawGemWallet(\n    bank: PublicKey,\n    vault: PublicKey,\n    gemAmount: BN,\n    gemMint: PublicKey\n  ) {\n    return this.withdrawGem(\n      bank,\n      vault,\n      this.wallet.publicKey,\n      gemAmount,\n      gemMint,\n      this.wallet.publicKey\n    );\n  }\n\n  async addToWhitelistWallet(\n    bank: PublicKey,\n    addressToWhitelist: PublicKey,\n    whitelistType: WhitelistType\n  ) {\n    return this.addToWhitelist(\n      bank,\n      this.wallet.publicKey,\n      addressToWhitelist,\n      whitelistType\n    );\n  }\n\n  async removeFromWhitelistWallet(bank: PublicKey, addressToRemove: PublicKey) {\n    return this.removeFromWhitelist(\n      bank,\n      this.wallet.publicKey,\n      addressToRemove\n    );\n  }\n}\n"],"sourceRoot":""}]}