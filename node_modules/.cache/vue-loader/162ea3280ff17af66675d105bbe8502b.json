{"remainingRequest":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/components/gem-farm/BankWhitelist.vue?vue&type=template&id=816cc700&ts=true","dependencies":[{"path":"/home/gynchiii/gem-farm/app/gem-farm/src/components/gem-farm/BankWhitelist.vue","mtime":1643839215713},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1643597848340},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1643597859789},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1643597863917},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1643597863917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0ibmVzLWNvbnRhaW5lciB3aXRoLXRpdGxlIj4KICAgIDxwIGNsYXNzPSJ0aXRsZSI+V2hpdGVsaXN0IE1pbnRzIC8gQ3JlYXRvcnM8L3A+CiAgICA8Zm9ybSBAc3VibWl0LnByZXZlbnQ9InVwZGF0ZVdoaXRlbGlzdCI+CiAgICAgIDxsYWJlbD4KICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIGNsYXNzPSJuZXMtcmFkaW8iIHZhbHVlPSJhZGQiIHYtbW9kZWw9ImFjdGlvbiIgLz4KICAgICAgICA8c3Bhbj5BZGQ8L3NwYW4+CiAgICAgIDwvbGFiZWw+CiAgICAgIDxsYWJlbD4KICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIGNsYXNzPSJuZXMtcmFkaW8iIHZhbHVlPSJyZW1vdmUiIHYtbW9kZWw9ImFjdGlvbiIgLz4KICAgICAgICA8c3Bhbj5SZW1vdmU8L3NwYW4+CiAgICAgIDwvbGFiZWw+CgogICAgICA8ZGl2IGNsYXNzPSJuZXMtZmllbGQgY2xhc3M9bXQtNSI+CiAgICAgICAgPGxhYmVsIGZvcj0iYWRkcmVzcyI+QWRkcmVzczo8L2xhYmVsPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iYWRkcmVzcyIgY2xhc3M9Im5lcy1pbnB1dCIgdi1tb2RlbD0iYWRkcmVzcyIgLz4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgICA8bGFiZWw+CiAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgIGNsYXNzPSJuZXMtcmFkaW8iCiAgICAgICAgICAgIDp2YWx1ZT0iV2hpdGVsaXN0VHlwZS5DcmVhdG9yIgogICAgICAgICAgICB2LW1vZGVsPSJ0eXBlIgogICAgICAgICAgLz4KICAgICAgICAgIDxzcGFuPkNyZWF0b3I8L3NwYW4+CiAgICAgICAgPC9sYWJlbD4KICAgICAgICA8bGFiZWw+CiAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgIGNsYXNzPSJuZXMtcmFkaW8iCiAgICAgICAgICAgIDp2YWx1ZT0iV2hpdGVsaXN0VHlwZS5NaW50IgogICAgICAgICAgICB2LW1vZGVsPSJ0eXBlIgogICAgICAgICAgLz4KICAgICAgICAgIDxzcGFuPk1pbnQ8L3NwYW4+CiAgICAgICAgPC9sYWJlbD4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJtdC0yIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJuZXMtYnRuIGlzLXByaW1hcnkiPlVwZGF0ZTwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgIDwvZm9ybT4KCiAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgPGRpdiB2LWZvcj0icHJvb2YgaW4gcHJvb2ZzIiA6a2V5PSJwcm9vZi5hZGRyZXNzIj4KICAgICAgICB7eyBwcm9vZi5hY2NvdW50LndoaXRlbGlzdGVkQWRkcmVzcy50b0Jhc2U1OCgpIH19IC0KICAgICAgICB7eyBwYXJzZVdoaXRlbGlzdFR5cGUocHJvb2YuYWNjb3VudC53aGl0ZWxpc3RUeXBlKSB9fQogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo="},{"version":3,"sources":["/home/gynchiii/gem-farm/app/gem-farm/src/components/gem-farm/BankWhitelist.vue"],"names":[],"mappings":"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","file":"/home/gynchiii/gem-farm/app/gem-farm/src/components/gem-farm/BankWhitelist.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"nes-container with-title\">\n    <p class=\"title\">Whitelist Mints / Creators</p>\n    <form @submit.prevent=\"updateWhitelist\">\n      <label>\n        <input type=\"radio\" class=\"nes-radio\" value=\"add\" v-model=\"action\" />\n        <span>Add</span>\n      </label>\n      <label>\n        <input type=\"radio\" class=\"nes-radio\" value=\"remove\" v-model=\"action\" />\n        <span>Remove</span>\n      </label>\n\n      <div class=\"nes-field class=mt-5\">\n        <label for=\"address\">Address:</label>\n        <input type=\"text\" id=\"address\" class=\"nes-input\" v-model=\"address\" />\n      </div>\n\n      <div class=\"mt-5\">\n        <label>\n          <input\n            type=\"radio\"\n            class=\"nes-radio\"\n            :value=\"WhitelistType.Creator\"\n            v-model=\"type\"\n          />\n          <span>Creator</span>\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            class=\"nes-radio\"\n            :value=\"WhitelistType.Mint\"\n            v-model=\"type\"\n          />\n          <span>Mint</span>\n        </label>\n      </div>\n\n      <div class=\"mt-2\">\n        <button class=\"nes-btn is-primary\">Update</button>\n      </div>\n    </form>\n\n    <div class=\"mt-5\">\n      <div v-for=\"proof in proofs\" :key=\"proof.address\">\n        {{ proof.account.whitelistedAddress.toBase58() }} -\n        {{ parseWhitelistType(proof.account.whitelistType) }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport { WhitelistType } from '@gemworks/gem-farm-ts';\nimport useCluster from '@/composables/cluster';\nimport useWallet from '@/composables/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { initGemFarm } from '@/common/gem-farm';\n\nexport default defineComponent({\n  props: {\n    farm: { type: String, required: true },\n    bank: { type: String, required: true },\n  },\n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      gf = await initGemFarm(getConnection(), getWallet()!);\n    });\n\n    //need an onmounted hook because this component isn't yet mounted when wallet/cluster are set\n    onMounted(async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n      }\n      await fetchProofs();\n    });\n\n    // --------------------------------------- whitelist\n    const action = ref<string>('add');\n    const address = ref<string>();\n    const type = ref<WhitelistType>(WhitelistType.Creator);\n    const proofs = ref<PublicKey[]>([]);\n\n    const fetchProofs = async () => {\n      proofs.value = await gf.fetchAllWhitelistProofPDAs(\n        new PublicKey(props.bank)\n      );\n    };\n\n    const updateWhitelist = async () => {\n      if (action.value === 'add') {\n        await gf.addToBankWhitelistWallet(\n          new PublicKey(props.farm),\n          new PublicKey(address.value!),\n          type.value\n        );\n        await fetchProofs();\n      } else {\n        await gf.removeFromBankWhitelistWallet(\n          new PublicKey(props.farm),\n          new PublicKey(address.value!)\n        );\n        await fetchProofs();\n      }\n    };\n\n    const parseWhitelistType = (numType: number) => {\n      switch (numType) {\n        case 1:\n          return 'Creator';\n        case 2:\n          return 'Mint';\n        case 3:\n          return 'Mint + Whitelist';\n        default:\n          return 'unknown';\n      }\n    };\n\n    return {\n      WhitelistType,\n      action,\n      address,\n      type,\n      proofs,\n      updateWhitelist,\n      parseWhitelistType,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n"]}]}