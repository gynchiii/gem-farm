{"remainingRequest":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/gynchiii/gem-farm/app/gem-farm/src/views/Farmer.vue?vue&type=style&index=0&id=1b90589d&scoped=true&lang=css","dependencies":[{"path":"/home/gynchiii/gem-farm/app/gem-farm/src/views/Farmer.vue","mtime":1644032003819},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/css-loader/dist/cjs.js","mtime":1643597863633},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1643597863917},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/postcss-loader/src/index.js","mtime":1643597863847},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1643597848373},{"path":"/home/gynchiii/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1643597863917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5iZy1idXR0IHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQ1LCAyMDcsIDE4OSk7Cn0KLmJnLWFxdWEtMSB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE0NSwgMjA3LCAxODkpOwp9Ci5iZy1hcXVhLWdyaWQgewogIGJhY2tncm91bmQtY29sb3I6IHJnYigxMjAsIDE0NSwgMTM4KTsKfQoudGV4dC1hcXVhLTEgewogIGNvbG9yOiByZ2IoODQsIDE1MCwgMTMwKTsKfQouYmctYmxhY2stMSB7CiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7Cn0KCg=="},{"version":3,"sources":["/home/gynchiii/gem-farm/app/gem-farm/src/views/Farmer.vue"],"names":[],"mappings":";AA4QA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1B;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB","file":"/home/gynchiii/gem-farm/app/gem-farm/src/views/Farmer.vue","sourceRoot":"","sourcesContent":["<template>\n  <ConfigPane />\n  <div v-if=\"!wallet\" class=\"text-center text-aqua-1\">Pls connect (burner) wallet</div>\n  <div v-else>\n    <!--farm address-->\n    <div style=\"with: 40vw;\" class=\" mb-10\">\n      <div  class=\"text-aqua-1 flex-col flex items-center py-10 px-10 justify-center mb-5\">\n        <label class=\"col-1\" for=\"farm text-aqua\">Farm address:</label>\n        <input id=\"farm\" class=\"col-2 bg-aqua-1\" style=\"width: 30vw;\" v-model=\"farm\" />\n      </div>\n    </div>\n\n    <div class=\"\" v-if=\"farmerAcc\">\n      <FarmerDisplay\n        :key=\"false\"\n        :farm=\"farm\"\n        :farmAcc=\"farmAcc\"\n        :farmer=\"farmer\"\n        :farmerAcc=\"farmerAcc\"\n        class=\"mb-10\"\n        @refresh-farmer=\"handleRefreshFarmer\"\n      />\n      <Vault\n        :key=\"false\"\n        class=\"mb-10\"\n        :vault=\"farmerAcc.vault.toBase58()\"\n        @selected-wallet-nft=\"handleNewSelectedNFT\"\n      >\n        <button\n          v-if=\"farmerState === 'staked' && selectedNFTs.length > 0\"\n          class=\"nes-btn is-primary mr-5\"\n          @click=\"addGems\"\n        >\n          Add Gems (resets staking)\n        </button>\n      </Vault>\n            <div class=\"flex mt-7 justify-center\">\n        <button\n          v-if=\"farmerState === 'unstaked'\"\n          class=\"nes-btn is-dark mr-5\"\n          @click=\"beginStaking\"\n        >\n          Begin staking\n        </button>\n        <button\n          v-if=\"farmerState === 'staked'\"\n          class=\"nes-btn is-error mr-5\"\n          @click=\"endStaking\"\n        >\n          End staking\n        </button>\n        <button\n          v-if=\"farmerState === 'pendingCooldown'\"\n          class=\"nes-btn is-error mr-5\"\n          @click=\"endStaking\"\n        >\n          End cooldown\n        </button>\n        <button class=\"nes-btn bg-butt\" @click=\"claim\">\n          Claim {{ availableA }} A / {{ availableB }} B\n        </button>\n      </div>\n    </div>\n    <div v-else>\n      <div class=\"w-full text-aqua text-center mb-5\">\n        Farmer account not found :( Create a new one?\n      </div>\n      <div class=\"w-full text-center\">\n        <button class=\"nes-btn bg-butt\" @click=\"initFarmer\">\n          New Farmer\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, nextTick, onMounted, ref, watch } from 'vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport { initGemFarm } from '@/common/gem-farm';\nimport { PublicKey } from '@solana/web3.js';\nimport ConfigPane from '@/components/ConfigPane.vue';\nimport FarmerDisplay from '@/components/gem-farm/FarmerDisplay.vue';\nimport Vault from '@/components/gem-bank/Vault.vue';\nimport { INFT } from '@/common/web3/NFTget';\nimport { stringifyPKsAndBNs } from '@gemworks/gem-farm-ts';\nimport { publicKey } from '@project-serum/anchor/dist/cjs/utils';\n\nexport default defineComponent({\n  components: { Vault, FarmerDisplay, ConfigPane },\n  setup() {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      await freshStart();\n    });\n\n    //needed in case we switch in from another window\n    onMounted(async () => {\n      await freshStart();\n    });\n\n    // --------------------------------------- farmer details\n    const farm = ref<string>();\n    const farmAcc = ref<any>();\n\n    const farmerIdentity = ref<string>();\n    const farmerAcc = ref<any>();\n    const farmerState = ref<string>();\n\n    const availableA = ref<string>();\n    const availableB = ref<string>();\n\n    //auto loading for when farm changes\n    watch(farmAcc, async () => {\n      await freshStart();\n    });\n\n    const updateAvailableRewards = async () => {\n      availableA.value = farmerAcc.value.rewardA.accruedReward\n        .sub(farmerAcc.value.rewardA.paidOutReward)\n        .toString();\n      availableB.value = farmerAcc.value.rewardB.accruedReward\n        .sub(farmerAcc.value.rewardB.paidOutReward)\n        .toString();\n    };\n\n    const fetchFarn = async () => {\n      farmAcc.value = await gf.fetchFarmAcc(new PublicKey(farm.value!));\n      console.log(\n        `farm found at ${farm.value}:`,\n        stringifyPKsAndBNs(farmAcc.value)\n      );\n    };\n\n    const fetchFarmer = async () => {\n      const [farmerPDA] = await gf.findFarmerPDA(\n        new PublicKey(farm.value!),\n        getWallet()!.publicKey\n      );\n      farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n      farmerAcc.value = await gf.fetchFarmerAcc(farmerPDA);\n      farmerState.value = gf.parseFarmerState(farmerAcc.value);\n      await updateAvailableRewards();\n      console.log(\n        `farmer found at ${farmerIdentity.value}:`,\n        stringifyPKsAndBNs(farmerAcc.value)\n      );\n    };\n\n    const freshStart = async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n\n        //reset stuff\n        farmAcc.value = undefined;\n        farmerAcc.value = undefined;\n        farmerState.value = undefined;\n        availableA.value = undefined;\n        availableB.value = undefined;\n\n        try {\n          await fetchFarn();\n          await fetchFarmer();\n        } catch (e) {\n          console.log(`farm with PK ${farm.value} not found :(`);\n        }\n      }\n    };\n\n    const initFarmer = async () => {\n      await gf.initFarmerWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n    };\n\n    // --------------------------------------- staking\n    const beginStaking = async () => {\n      await gf.stakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n\n    const endStaking = async () => {\n      await gf.unstakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n\n    const claim = async () => {\n      await gf.claimWallet(\n        new PublicKey(farm.value!),\n        new PublicKey(farmAcc.value.rewardA.rewardMint!),\n        new PublicKey(farmAcc.value.rewardB.rewardMint!)\n      );\n      await fetchFarmer();\n    };\n\n    const handleRefreshFarmer = async () => {\n      await fetchFarmer();\n    };\n\n    // --------------------------------------- adding extra gem\n    const selectedNFTs = ref<INFT[]>([]);\n\n    const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\n      console.log(`selected ${newSelectedNFTs.length} NFTs`);\n      selectedNFTs.value = newSelectedNFTs;\n    };\n\n    const addSingleGem = async (\n      gemMint: PublicKey,\n      gemSource: PublicKey,\n      creator: PublicKey\n    ) => {\n      await gf.flashDepositWallet(\n        new PublicKey(farm.value!),\n        '1',\n        gemMint,\n        gemSource,\n        creator\n      );\n      await fetchFarmer();\n    };\n\n    const addGems = async () => {\n      await Promise.all(\n        selectedNFTs.value.map((nft) => {\n          const creator = new PublicKey(\n            //todo currently simply taking the 1st creator\n            (nft.onchainMetadata as any).data.creators[0].address\n          );\n          console.log('creator is', creator.toBase58());\n\n          addSingleGem(nft.mint, nft.pubkey!, creator);\n        })\n      );\n      console.log(\n        `added another ${selectedNFTs.value.length} gems into staking vault`\n      );\n    };\n\n    return {\n      wallet,\n      farm,\n      farmAcc,\n      farmer: farmerIdentity,\n      farmerAcc,\n      farmerState,\n      availableA,\n      availableB,\n      initFarmer,\n      beginStaking,\n      endStaking,\n      claim,\n      handleRefreshFarmer,\n      selectedNFTs,\n      handleNewSelectedNFT,\n      addGems,\n    };\n  },\n});\n</script>\n\n<style scoped>\n.bg-butt {\n  background-color: rgb(145, 207, 189);\n}\n.bg-aqua-1 {\n  background-color: rgb(145, 207, 189);\n}\n.bg-aqua-grid {\n  background-color: rgb(120, 145, 138);\n}\n.text-aqua-1 {\n  color: rgb(84, 150, 130);\n}\n.bg-black-1 {\n  background-color: black;\n}\n\n</style>\n"]}]}